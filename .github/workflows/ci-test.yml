name: CI Test Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: findus
          POSTGRES_PASSWORD: findus123
          POSTGRES_DB: findus_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up environment variables
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DJANGO_ENV: "local"
          DJANGO_SETTINGS_MODULE: "config.settings.local"
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
          echo "DB_PORT=$DB_PORT" >> $GITHUB_ENV
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DJANGO_ENV=$DJANGO_ENV" >> $GITHUB_ENV
          echo "DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE" >> $GITHUB_ENV
          echo "SECRET_KEY=$SECRET_KEY" >> $GITHUB_ENV

      - name: Apply migrations
        run: |
          export DJANGO_SETTINGS_MODULE=config.settings.local
          python manage.py migrate

      - name: Run tests
        run: |
          export DJANGO_SETTINGS_MODULE=config.settings.local
          pytest --cov=apps --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # Usa el token de Codecov
          file: coverage.xml  # Especifica el archivo de cobertura
          fail_ci_if_error: true  # Falla el pipeline si hay un error